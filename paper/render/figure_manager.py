#!/usr/bin/env python3
"""
Figure Manager for Synergetics Paper

This module provides automatic figure numbering and comprehensive caption generation
for the Synergetics research paper. It ensures consistent figure numbering across
all sections and generates meaningful captions based on visualization metadata.

Author: Daniel Ari Friedman
Email: daniel@activeinference.institute
ORCID: 0000-0001-6232-9096
"""

from typing import Dict, List, Any, Optional, Tuple
from pathlib import Path
import json
import re
from dataclasses import dataclass
from collections import defaultdict


@dataclass
class FigureMetadata:
    """Metadata for a figure"""
    number: int
    category: str
    subcategory: str
    filename: str
    title: str
    description: str
    technical_details: Dict[str, Any]
    generated_by: str
    timestamp: str


class FigureManager:
    """Manages automatic figure numbering and caption generation"""

    def __init__(self):
        self.figure_counter = 0
        self.figures: Dict[int, FigureMetadata] = {}
        self.category_counters: Dict[str, int] = defaultdict(int)
        self.output_dir = Path("output")

    def register_figure(self, category: str, subcategory: str, filename: str,
                       title: str, description: str, technical_details: Optional[Dict[str, Any]] = None,
                       generated_by: str = "unknown") -> FigureMetadata:
        """Register a new figure and assign it a number"""
        self.figure_counter += 1
        self.category_counters[category] += 1

        if technical_details is None:
            technical_details = {}

        # Extract timestamp from filename if available
        timestamp = "unknown"
        timestamp_match = re.search(r'(\d{8}_\d{6})', filename)
        if timestamp_match:
            timestamp = timestamp_match.group(1)

        metadata = FigureMetadata(
            number=self.figure_counter,
            category=category,
            subcategory=subcategory,
            filename=filename,
            title=title,
            description=description,
            technical_details=technical_details,
            generated_by=generated_by,
            timestamp=timestamp
        )

        self.figures[self.figure_counter] = metadata
        return metadata

    def generate_caption(self, figure_number: int, style: str = "academic") -> str:
        """Generate a comprehensive caption for a figure"""
        if figure_number not in self.figures:
            return f"Figure {figure_number}: [Figure not found]"

        fig = self.figures[figure_number]

        if style == "academic":
            caption = f"Figure {figure_number}: {fig.title}. "
            caption += f"{fig.description}. "
            caption += f"Generated using {fig.generated_by}."

            # Add technical details
            if fig.technical_details:
                details = []
                if 'backend' in fig.technical_details:
                    details.append(f"Visualization: {fig.technical_details['backend']}")
                if 'resolution' in fig.technical_details:
                    details.append(f"Resolution: {fig.technical_details['resolution']}")
                if 'data_points' in fig.technical_details:
                    details.append(f"Data points: {fig.technical_details['data_points']}")

                if details:
                    caption += f" Technical details: {', '.join(details)}."

        elif style == "concise":
            caption = f"Figure {figure_number}: {fig.title}"

        elif style == "detailed":
            caption = f"Figure {figure_number}: {fig.title}\n"
            caption += f"Category: {fig.category.title()}/{fig.subcategory.title()}\n"
            caption += f"Description: {fig.description}\n"
            caption += f"Generated by: {fig.generated_by}\n"
            if fig.technical_details:
                caption += f"Technical details: {fig.technical_details}\n"

        return caption

    def get_figure_reference(self, figure_number: int, style: str = "markdown") -> str:
        """Get a formatted figure reference"""
        if figure_number not in self.figures:
            return f"[Figure {figure_number} not found]"

        if style == "markdown":
            return f"![Figure {figure_number}](output/{self.figures[figure_number].filename})"
        elif style == "latex":
            return f"\\includegraphics{{output/{self.figures[figure_number].filename}}}"
        elif style == "html":
            return f'<img src="output/{self.figures[figure_number].filename}" alt="Figure {figure_number}">'
        else:
            return f"Figure {figure_number}"

    def get_figure_list(self) -> List[Dict[str, Any]]:
        """Get a list of all registered figures"""
        return [
            {
                "number": fig.number,
                "category": fig.category,
                "subcategory": fig.subcategory,
                "filename": fig.filename,
                "title": fig.title,
                "description": fig.description,
                "generated_by": fig.generated_by,
                "timestamp": fig.timestamp
            }
            for fig in self.figures.values()
        ]

    def get_figures_by_category(self, category: str) -> List[FigureMetadata]:
        """Get all figures in a specific category"""
        return [fig for fig in self.figures.values() if fig.category == category]

    def generate_figure_overview(self) -> str:
        """Generate an overview of all figures organized by category"""
        overview = "# Figure Overview\n\n"
        overview += f"Total figures: {len(self.figures)}\n\n"

        # Group by category
        by_category = defaultdict(list)
        for fig in self.figures.values():
            by_category[fig.category].append(fig)

        for category, figures in by_category.items():
            overview += f"## {category.title()} Figures ({len(figures)})\n\n"
            for fig in sorted(figures, key=lambda x: x.number):
                overview += f"- **Figure {fig.number}**: {fig.title}\n"
                overview += f"  - File: `{fig.filename}`\n"
                overview += f"  - Generated by: {fig.generated_by}\n\n"

        return overview

    def save_figure_registry(self, filename: str = "figure_registry.json"):
        """Save the figure registry to a JSON file"""
        registry = {
            "total_figures": len(self.figures),
            "categories": dict(self.category_counters),
            "figures": self.get_figure_list(),
            "generated_at": str(Path.cwd())
        }

        registry_path = self.output_dir / filename
        self.output_dir.mkdir(parents=True, exist_ok=True)

        with open(registry_path, 'w') as f:
            json.dump(registry, f, indent=2)

        return registry_path

    def load_figure_registry(self, filename: str = "figure_registry.json"):
        """Load figure registry from a JSON file"""
        registry_path = self.output_dir / filename

        if not registry_path.exists():
            return False

        with open(registry_path, 'r') as f:
            registry = json.load(f)

        # Restore figures
        for fig_data in registry.get('figures', []):
            metadata = FigureMetadata(**fig_data)
            self.figures[metadata.number] = metadata
            self.category_counters[metadata.category] += 1

        self.figure_counter = max(self.figures.keys()) if self.figures else 0

        return True


# Global figure manager instance
figure_manager = FigureManager()


def register_figure_auto(filename: str, metadata: Optional[Dict[str, Any]] = None) -> FigureMetadata:
    """Automatically register a figure based on its filename and metadata"""
    # Extract category and subcategory from path
    path_parts = Path(filename).parts

    # Default values
    category = "unknown"
    subcategory = "unknown"
    title = Path(filename).stem.replace('_', ' ').title()
    description = f"Visualization generated by {metadata.get('generated_by', 'unknown') if metadata else 'unknown'}"
    generated_by = metadata.get('generated_by', 'unknown') if metadata else 'unknown'

    # Try to infer category from path
    if len(path_parts) >= 2:
        if 'geometric' in path_parts:
            category = 'geometric'
            if 'polyhedra' in path_parts:
                subcategory = 'polyhedra'
                title = f"3D {' '.join(Path(filename).stem.split('_')[:-1]).title()}"
                description = f"Three-dimensional visualization of {Path(filename).stem.split('_')[0]} geometry"
            elif 'coordinates' in path_parts:
                subcategory = 'coordinates'
                # Extract coordinate values from filename
                stem = Path(filename).stem
                coord_match = re.search(r'quadray_coordinate_([0-9_]+)', stem)
                if coord_match:
                    coord_str = coord_match.group(1)
                    coords = coord_str.split('_')
                    if len(coords) == 4:
                        a, b, c, d = map(int, coords)
                        if a == 0 and b == 0 and c == 0 and d == 0:
                            title = "Quadray Coordinate System Origin"
                            description = f"This visualization shows the origin point (0,0,0,0) in the four-dimensional Quadray coordinate system. The Quadray system extends traditional 3D Cartesian coordinates with an additional tetrahedral dimension, enabling precise representation of complex geometric relationships that cannot be adequately captured in standard coordinate systems."
                        else:
                            title = f"Quadray Coordinate System Analysis"
                            description = f"Advanced visualization of the coordinate ({a},{b},{c},{d}) in the Quadray system, showing how the four-dimensional tetrahedral coordinates capture spatial relationships that reveal underlying geometric symmetries and structural patterns in three-dimensional space."
                    else:
                        title = f"Quadray Coordinate System Visualization"
                        description = f"Visualization of Quadray coordinate system with coordinate values: {coord_str}"
                else:
                    title = f"Quadray Coordinate System Visualization"
                    description = f"Visualization of Quadray coordinate system"
        elif 'mathematical' in path_parts:
            category = 'mathematical'
            if 'palindromes' in path_parts:
                subcategory = 'palindromes'
                title = f"Palindromic Pattern Analysis"
                description = f"Analysis of palindromic number patterns"
            elif 'scheherazade' in path_parts:
                subcategory = 'scheherazade'
                title = f"Scheherazade Number Analysis"
                description = f"Analysis of powers of 1001 and their patterns"
        elif 'numbers' in path_parts:
            category = 'numbers'
            if 'palindromes' in path_parts:
                subcategory = 'palindromes'
            elif 'primorials' in path_parts:
                subcategory = 'primorials'
                title = f"Primorial Sequence Analysis"
                description = f"Analysis of primorial numbers and their properties"

    # Add technical details if available
    technical_details = {}
    if metadata:
        technical_details.update(metadata)

    return figure_manager.register_figure(
        category=category,
        subcategory=subcategory,
        filename=filename,
        title=title,
        description=description,
        technical_details=technical_details,
        generated_by=generated_by
    )


def get_next_figure_number() -> int:
    """Get the next figure number without registering"""
    return figure_manager.figure_counter + 1


def get_figure_caption(figure_number: int, style: str = "academic") -> str:
    """Get the caption for a figure"""
    return figure_manager.generate_caption(figure_number, style)


def get_figure_reference(figure_number: int, style: str = "markdown") -> str:
    """Get a reference to a figure"""
    return figure_manager.get_figure_reference(figure_number, style)


if __name__ == "__main__":
    # Example usage
    fig1 = register_figure_auto("output/geometric/polyhedra/tetrahedron_3d.png",
                               {"generated_by": "matplotlib", "backend": "matplotlib"})
    print(f"Registered: {fig1.title} as Figure {fig1.number}")

    fig2 = register_figure_auto("output/mathematical/palindromes/palindrome_heatmap.png",
                               {"generated_by": "seaborn", "backend": "matplotlib"})
    print(f"Registered: {fig2.title} as Figure {fig2.number}")

    print("\nFigure Overview:")
    print(figure_manager.generate_figure_overview())
